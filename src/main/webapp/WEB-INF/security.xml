<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:oauth2="http://www.springframework.org/schema/security/oauth2"
       xmlns:sec="http://www.springframework.org/schema/security"
       xsi:schemaLocation="
		http://www.springframework.org/schema/security/oauth2 http://www.springframework.org/schema/security/spring-security-oauth2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd">

    <import resource="RestLogin-ds.xml"/>

    <!-- extracts the client credential from the data request -->
    <sec:http pattern="/oauth/token" create-session="stateless"
              authentication-manager-ref="authenticationManager">
        <sec:http-basic entry-point-ref="clientAuthentificationEntryPoint"/>
        <sec:intercept-url pattern="/oauth/token" access="IS_AUTHENTICATED_FULLY"/>
        <sec:anonymous enabled="false"/>
        <sec:custom-filter ref="clientCredentialsTokenEndpointFilter"
                           before="BASIC_AUTH_FILTER"/>
        <sec:access-denied-handler ref="oauthAccessDeniedHandler"/>
    </sec:http>

    <sec:global-method-security
            pre-post-annotations="enabled"/>

    <sec:http pattern="/protected/**" create-session="never"
              entry-point-ref="oauthAuthenticationEntryPoint" use-expressions="true">
        <sec:anonymous enabled="false"/>
        <sec:intercept-url pattern="/protected/user/*" method="GET"
                           access="isFullyAuthenticated() and hasRole('manager')"/>
        <sec:custom-filter ref="resourceServerFilter"
                           before="PRE_AUTH_FILTER"/>
        <sec:access-denied-handler ref="oauthAccessDeniedHandler"/>
    </sec:http>

    <bean id="clientAuthentificationEntryPoint"
          class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
        <property name="realmName" value="springsec/client"/>
        <property name="typeName" value="Basic"/>
    </bean>

    <bean id="oauthAuthenticationEntryPoint"
          class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
        <property name="realmName" value="/protected/"/>
    </bean>

    <bean id="oauthAccessDeniedHandler"
          class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler">
    </bean>

    <bean id="clientCredentialsTokenEndpointFilter"
          class="org.springframework.security.oauth2.provider.client.ClientCredentialsTokenEndpointFilter">
        <property name="authenticationManager" ref="authenticationManager"/>
    </bean>

    <sec:authentication-manager alias="authenticationManager">
        <sec:authentication-provider user-service-ref="clientDetailsUserService">
            <!--USE ENCRYPTION FOR secret key-->
            <!--<sec:password-encoder ref="encoderBcrypt"/>-->
                </sec:authentication-provider>
    </sec:authentication-manager>

    <bean id="encoderBcrypt"
          class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder">
        <constructor-arg name="strength" value="10"/>
    </bean>

    <bean id="clientDetailsUserService"
          class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">
        <constructor-arg ref="clientDetails"/>
        <property name="passwordEncoder" ref="encoderBcrypt"/>
    </bean>

    <!--<bean id="clientDetails" class="com.bondar.RestLogin.data.CustomClientDetailsService">-->
        <!--<property name="id" value="webstore"/>-->
        <!--<property name="secretKey" value="webstore-secret-key"/>-->
    <!--</bean>-->

    <oauth2:client-details-service id="clientDetails" >
 		<oauth2:client
            resource-ids="springsec"
 			client-id="webstoreadmin"
 			secret="webstore-admin-secret-key"
 			authorized-grant-types="password,refresh_token"
            authorities="ROLE_ADMIN"
            scope="read,write"
 			access-token-validity="240"
 			refresh-token-validity="240"
 		/>

        <oauth2:client
                client-id="webstoreclient"
                secret="webstore-client-secret-key"
                authorized-grant-types="password,client_credentials,refresh_token,authorization_code"
                authorities="ROLE_USER"
                scope="read,write"
                access-token-validity="240"
                refresh-token-validity="240"
                />
 	</oauth2:client-details-service>

    <sec:authentication-manager id="userAuthenticationManager">
        <sec:authentication-provider user-service-ref="userDetailsService">
            <!--<sec:jdbc-user-service data-source-ref="datasource" />-->
            <!--<sec:user-service>-->
                <!--<sec:user name="admin" authorities="ROLE_ADMIN" password="$2a$10$uxatpmywQLMS7y/qj5Z03ecXj.bd7p21ByXF5eTkz0nmh37sAMf5y" />-->
                <!--<sec:user name="user" authorities="ROLE_USER" password="user" />-->
                <!--<sec:user name="manager" authorities="manager" password="manager" />-->
            <!--</sec:user-service>-->
            <sec:password-encoder ref="encoderBcrypt" />
        </sec:authentication-provider>
    </sec:authentication-manager>

    <bean id="userDetailsService" class="com.bondar.RestLogin.controller.CustomUserService"/>

    <!-- validate the user credential based of username and password -->
    <oauth2:authorization-server
            client-details-service-ref="clientDetails" token-services-ref="tokenServices">
        <oauth2:authorization-code/>
        <oauth2:implicit/>
        <oauth2:refresh-token/>
        <oauth2:client-credentials/>
        <oauth2:password authentication-manager-ref="userAuthenticationManager"/>
    </oauth2:authorization-server>

    <oauth2:resource-server id="resourceServerFilter"
                            resource-id="springsec"
                            token-services-ref="tokenServices"
                            entry-point-ref="oauthAuthenticationEntryPoint" />

    <bean id="tokenStore"
          class="org.springframework.security.oauth2.provider.token.InMemoryTokenStore"/>

    <bean id="tokenServices"
          class="org.springframework.security.oauth2.provider.token.DefaultTokenServices">
        <property name="tokenStore" ref="tokenStore"/>
        <property name="supportRefreshToken" value="true"/>
        <property name="accessTokenValiditySeconds" value="120"></property>
        <property name="clientDetailsService" ref="clientDetails"/>
    </bean>

</beans>
